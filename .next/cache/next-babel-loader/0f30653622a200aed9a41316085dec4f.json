{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mobin\\\\Desktop\\\\ReactApp\\\\next\\\\pages\\\\[country]\\\\index.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport Error from 'next/error';\nimport Thumbnail from '../../components/Thumbnail';\n\nconst Home = ({\n  shows,\n  country,\n  statusCode\n}) => {\n  //console.log(shows)    \n  if (statusCode) {\n    return __jsx(Error, {\n      statusCode: statusCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    });\n  }\n\n  const renderShows = () => {\n    return shows.map((showItem, index) => {\n      const {\n        show\n      } = showItem;\n      return __jsx(\"li\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, __jsx(Thumbnail, {\n        imageURL: show.image && show.image.medium || undefined,\n        caption: show.name,\n        href: \"[country]/[showId]\",\n        as: `/${country}/${show.id}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }));\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \"home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    className: \"jsx-500497927\" + \" \" + \"tvshows-grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, renderShows(), __jsx(_JSXStyle, {\n    id: \"500497927\",\n    __self: this\n  }, \".tvshows-grid.jsx-500497927{display:grid;grid-template-columns:1fr 1fr;gap:10px;list-style-type:none;padding:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbW9iaW5cXERlc2t0b3BcXFJlYWN0QXBwXFxuZXh0XFxwYWdlc1xcW2NvdW50cnldXFxpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4Qm9CLEFBRW9CLGFBQ2lCLDhCQUNILFNBQ1kscUJBQ1gsVUFDOUIiLCJmaWxlIjoiQzpcXFVzZXJzXFxtb2JpblxcRGVza3RvcFxcUmVhY3RBcHBcXG5leHRcXHBhZ2VzXFxbY291bnRyeV1cXGluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IEVycm9yIGZyb20gJ25leHQvZXJyb3InO1xyXG5cclxuaW1wb3J0IFRodW1ibmFpbCBmcm9tICcuLi8uLi9jb21wb25lbnRzL1RodW1ibmFpbCc7XHJcblxyXG5cclxuY29uc3QgSG9tZSA9ICh7IHNob3dzLCBjb3VudHJ5LCBzdGF0dXNDb2RlIH0pID0+IHtcclxuICAgIC8vY29uc29sZS5sb2coc2hvd3MpICAgIFxyXG4gICAgaWYoc3RhdHVzQ29kZSl7XHJcbiAgICAgICAgcmV0dXJuIDxFcnJvciBzdGF0dXNDb2RlPXtzdGF0dXNDb2RlfS8+XHJcbiAgICB9XHJcbiAgICBjb25zdCByZW5kZXJTaG93cyA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gc2hvd3MubWFwKChzaG93SXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgeyBzaG93IH0gPSBzaG93SXRlbTtcclxuICAgICAgICAgICAgcmV0dXJuIDxsaSBrZXk9e2luZGV4fT5cclxuICAgICAgICAgICAgICAgIDxUaHVtYm5haWxcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZVVSTD17KHNob3cuaW1hZ2UgJiYgc2hvdy5pbWFnZS5tZWRpdW0pIHx8IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgICAgICAgICBjYXB0aW9uPXtzaG93Lm5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZj1cIltjb3VudHJ5XS9bc2hvd0lkXVwiXHJcbiAgICAgICAgICAgICAgICAgICAgYXM9e2AvJHtjb3VudHJ5fS8ke3Nob3cuaWR9YH1cclxuICAgICAgICAgICAgICAgIC8+PC9saT5cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob21lXCI+XHJcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJ0dnNob3dzLWdyaWRcIj5cclxuICAgICAgICAgICAgICAgIHtyZW5kZXJTaG93cygpfVxyXG5cclxuICAgICAgICAgICAgICAgIDxzdHlsZSBqc3g+e1xyXG4gICAgICAgICAgICAgICAgICAgIGAudHZzaG93cy1ncmlkIHtcclxuXHRcdFx0XHRcdFx0ZGlzcGxheTogZ3JpZDtcclxuXHRcdFx0XHRcdFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYXA6IDEwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMDtcclxuXHRcdFx0XHR9YH08L3N0eWxlPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufVxyXG5cclxuSG9tZS5nZXRJbml0aWFsUHJvcHMgPSBhc3luYyBjb250ZXh0ID0+IHtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvdW50cnkgPSBjb250ZXh0LnF1ZXJ5LmNvdW50cnkgfHwgJ2luJztcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly9hcGkudHZtYXplLmNvbS9zY2hlZHVsZT9jb3VudHJ5PSR7Y291bnRyeX0mZGF0ZT0yMDE0LTEyLTAxYCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2hvd3M6IHJlc3BvbnNlLmRhdGEsXHJcbiAgICAgICAgICAgIGNvdW50cnlcclxuICAgICAgICB9XHJcbiAgICB9Y2F0Y2goZXJyb3Ipe1xyXG4gICAgICAgIHJldHVybiB7c3RhdHVzQ29kZTogZXJyb3IucmVzcG9uc2UgPyBlcnJvci5yZXNwb25zZS5zdGF0dXMgOiA1MDB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhvbWU7Il19 */\\n/*@ sourceURL=C:\\\\\\\\Users\\\\\\\\mobin\\\\\\\\Desktop\\\\\\\\ReactApp\\\\\\\\next\\\\\\\\pages\\\\\\\\[country]\\\\\\\\index.js */\")));\n};\n\nHome.getInitialProps = async context => {\n  try {\n    const country = context.query.country || 'in';\n    const response = await axios.get(`https://api.tvmaze.com/schedule?country=${country}&date=2014-12-01`);\n    return {\n      shows: response.data,\n      country\n    };\n  } catch (error) {\n    return {\n      statusCode: error.response ? error.response.status : 500\n    };\n  }\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/mobin/Desktop/ReactApp/next/pages/[country]/index.js"],"names":["axios","Error","Thumbnail","Home","shows","country","statusCode","renderShows","map","showItem","index","show","image","medium","undefined","name","id","getInitialProps","context","query","response","get","data","error","status"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,OAAOC,SAAP,MAAsB,4BAAtB;;AAGA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBC,EAAAA;AAAlB,CAAD,KAAoC;AAC7C;AACA,MAAGA,UAAH,EAAc;AACV,WAAO,MAAC,KAAD;AAAO,MAAA,UAAU,EAAEA,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AACD,QAAMC,WAAW,GAAG,MAAM;AACtB,WAAOH,KAAK,CAACI,GAAN,CAAU,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAClC,YAAM;AAAEC,QAAAA;AAAF,UAAWF,QAAjB;AACA,aAAO;AAAI,QAAA,GAAG,EAAEC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACH,MAAC,SAAD;AACI,QAAA,QAAQ,EAAGC,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACC,KAAL,CAAWC,MAA1B,IAAqCC,SADnD;AAEI,QAAA,OAAO,EAAEH,IAAI,CAACI,IAFlB;AAGI,QAAA,IAAI,EAAC,oBAHT;AAII,QAAA,EAAE,EAAG,IAAGV,OAAQ,IAAGM,IAAI,CAACK,EAAG,EAJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADG,CAAP;AAOH,KATM,CAAP;AAUH,GAXD;;AAaA,SACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA,uCAAc,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,WAAW,EADhB;AAAA;AAAA;AAAA,s5FADJ,CADJ;AAgBH,CAlCD;;AAoCAJ,IAAI,CAACc,eAAL,GAAuB,MAAMC,OAAN,IAAiB;AAEpC,MAAI;AACA,UAAMb,OAAO,GAAGa,OAAO,CAACC,KAAR,CAAcd,OAAd,IAAyB,IAAzC;AACA,UAAMe,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAW,2CAA0ChB,OAAQ,kBAA7D,CAAvB;AACA,WAAO;AACHD,MAAAA,KAAK,EAAEgB,QAAQ,CAACE,IADb;AAEHjB,MAAAA;AAFG,KAAP;AAIH,GAPD,CAOC,OAAMkB,KAAN,EAAY;AACT,WAAO;AAACjB,MAAAA,UAAU,EAAEiB,KAAK,CAACH,QAAN,GAAiBG,KAAK,CAACH,QAAN,CAAeI,MAAhC,GAAyC;AAAtD,KAAP;AACH;AACJ,CAZD;;AAcA,eAAerB,IAAf","sourcesContent":["import axios from 'axios';\r\nimport Error from 'next/error';\r\n\r\nimport Thumbnail from '../../components/Thumbnail';\r\n\r\n\r\nconst Home = ({ shows, country, statusCode }) => {\r\n    //console.log(shows)    \r\n    if(statusCode){\r\n        return <Error statusCode={statusCode}/>\r\n    }\r\n    const renderShows = () => {\r\n        return shows.map((showItem, index) => {\r\n            const { show } = showItem;\r\n            return <li key={index}>\r\n                <Thumbnail\r\n                    imageURL={(show.image && show.image.medium) || undefined}\r\n                    caption={show.name}\r\n                    href=\"[country]/[showId]\"\r\n                    as={`/${country}/${show.id}`}\r\n                /></li>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <ul className=\"tvshows-grid\">\r\n                {renderShows()}\r\n\r\n                <style jsx>{\r\n                    `.tvshows-grid {\r\n\t\t\t\t\t\tdisplay: grid;\r\n\t\t\t\t\t\tgrid-template-columns: 1fr 1fr;\r\n                        gap: 10px;\r\n                        list-style-type: none;\r\n                        padding: 0;\r\n\t\t\t\t}`}</style>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nHome.getInitialProps = async context => {\r\n\r\n    try {\r\n        const country = context.query.country || 'in';\r\n        const response = await axios.get(`https://api.tvmaze.com/schedule?country=${country}&date=2014-12-01`);\r\n        return {\r\n            shows: response.data,\r\n            country\r\n        }\r\n    }catch(error){\r\n        return {statusCode: error.response ? error.response.status : 500}\r\n    }\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}